#!/usr/bin/env ruby
require 'httparty'
require 'paint'
require 'thor'
require 'yaml'

begin
  config = YAML.load_file File.expand_path('~/.lard.yml')
rescue
  STDERR.puts 'Unable to find your .lard.yml!'
  STDERR.puts '  Please double-check this file:'
  STDERR.puts '    ~/.lard.yml'
  STDERR.puts '  And make sure it has your auth token:'
  STDERR.puts '    token: yourhashgoeshere'
  exit 1
end

begin
  token = config['token']
rescue
  STDERR.puts 'No token in ~/.lard.yml!'
  exit 1
end

$options = {
  headers: {
    'Authorization' => "Token #{token}"
  }
}
$folders = []

module LardHTTP
  include HTTParty

  def get(endpoint, params = nil)
    query = { query: params }
    opts = $options.merge query
    res = HTTParty.get "#{prefix}#{endpoint}", opts
    parse_response res
  end

  def post(endpoint, args = {})
    query = { body: args.to_json, "Content-Type" => "application/json" }
    opts = $options.merge query
    puts "#{prefix}#{endpoint}"
    res = HTTParty.post "#{prefix}#{endpoint}", opts
    JSON.parse res.response
    #parse_response res
  end

  def parse_response(res)
    JSON.parse res.body, symbolize_names: true
  end

  def raw_get(url)
    JSON.parse HTTParty.get(url, $options).body, symbolize_names: true
  end

  def prefix
    'https://larder.io/api/1/@me/'
  end
 
  def get_folder_by_name(name)
    fetch_folders unless $folders.length > 0
    $folders.find do |folder|
      folder[:name] == name
    end
  end

  def print_folder_name(folder)
    print Paint[folder[:name], folder[:color]]
    puts ":\t#{folder[:links]} links"
  end

  def fetch_bookmarks(folder_id)
    # TODO: Verify pagination logic
    res = get "folders/#{folder_id}", { limit: 100 }
    bookmarks = res[:results] || []

    while res[:next] != nil
      res = raw_get res[:next]
      bookmarks.push *res[:results]
    end

    bookmarks
  end

  def fetch_folders
    # TODO: Verify pagination logic
    res = get 'folders'
    $folders = res[:results]

    while res[:next] != nil
      params = { offset: res[:next] }
      res = get 'folders', params
      $folders.push *res[:results]
    end

    # TODO: Cache these folders
  end
end

class Bookmark < Thor
  include LardHTTP

  desc 'new <FOLDER> <TITLE> <LINK>', 'Creates a new bookmark'
  def new(folder, title, link)
    if folder
      f = get_folder_by_name folder
      parent = f[:id]
    end
    
    puts post 'links/add', { "title" => title, "url" => link, "parent" => parent }
  end
end

class Lard < Thor
  include LardHTTP

  desc "bookmark", "[Interface] manage individual bookmarks"
  subcommand "bookmark", Bookmark

  desc 'user', 'Prints information about the logged-in user'
  def user
    puts get('user')
  end

  desc 'folders', 'Lists all bookmark folders'
  def folders
    if $folders == []
      fetch_folders
    end

    $folders.each do |folder|
      print_folder_name folder
    end
  end

  desc 'folder <NAME>', 'Lists all bookmarks in a given folder'
  def folder(name)
    folder = get_folder_by_name name
    raise "No such folder" unless folder

    print_folder_name folder

    bookmarks = fetch_bookmarks folder[:id]
    bookmarks.each do |bookmark|
      print_bookmark bookmark
    end
  end

  private

  def print_bookmark(bookmark)
    puts Paint["#{bookmark[:title]}", :bright]
    puts "  #{bookmark[:description]}"
    puts "  #{bookmark[:url]}"
      
    unless bookmark[:tags].empty?
      print "  "
      bookmark[:tags].each do |tag|
        print Paint["##{tag[:name]}", tag[:color]]
        print " "
      end
      puts " "
    end
  end
end

Lard.start(ARGV)
