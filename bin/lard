#!/usr/bin/env ruby

require 'date'
require 'paint'
require 'thor'
require 'yaml'
require 'lard'

# rubocop: disable ClassLength
class LardCLI < Thor
  def initialize(*args)
    super

    # Try to authenticate with ~/.lard.yml
    begin
      config = YAML.load_file File.expand_path('~/.lard.yml')
      token = config['token']
    rescue StandardError
      # Catch any file error here because the user can run `lard login`
      # to generate this config file, so we may be OK!
      token = nil
    end

    @lard = Lard.new token
  end

  desc 'user', 'Prints information about the logged-in user'

  def user
    print_user @lard.get 'user'
  end

  desc 'folders', 'Lists all bookmark folders'

  def folders
    @lard.folders.each do |folder|
      print_folder_name folder
    end
  end

  desc 'folder <NAME>', 'Lists all bookmarks in a given folder'

  def folder(name)
    folder = @lard.get_folder_by_name name
    raise "Could not find a folder named #{name}!" unless folder

    print_folder_name folder

    bookmarks = @lard.bookmarks folder[:id]
    bookmarks.each do |bookmark|
      print_bookmark bookmark
    end
  end

  desc 'tags', 'Lists all tags'

  def tags
    @lard.tags.each do |tag|
      print_tag tag
    end
  end

  desc 'search <QUERY>', 'Search for bookmarks'

  def search(*args)
    query = args.join ' '
    res = @lard.get 'search', q: query
    raise "No booknarks found match #{query}!" if res[:results].empty?

    bookmarks = res[:results]
    bookmarks.each do |b|
      print_bookmark b
    end
  end

  desc 'login [TOKEN]', 'Log in to larder with your API token'

  # rubocop: disable MethodLength
  def login(token = nil)
    unless token
      puts 'Enter your Larder API token to save to ~/.lard.yml.'
      puts 'Note: You can retrive your API token from https://larder.io/apps/clients/'
      token = STDIN.readline
    end
    return unless token

    unless system "echo \"token: #{token}\" > $HOME/.lard.yml"
      STDERR.puts 'Failed to save token to ~/.lard.yml!'
      exit 1
    end

    puts 'Saved token to ~/.lard.yml'
    # rubocop: enable MethodLength
  end

  desc 'bookmark <FOLDER> <TITLE> <LINK> [tags...]',
       'Creates or edits a bookmark'
  option :description, aliases: :d

  def bookmark(folder, title, link, *tags)
    f = @lard.get_folder_by_name folder
    raise "Could not find a folder named #{folder}!" unless f

    res = @lard.post 'links/add',
                     'title' => title, 'url' => link, 'tags' => tags,
                     'parent' => f[:id],
                     'description' => options[:description]

    raise 'Unable to add bookmark!' if res[:error]

    print_bookmark res
  end

  desc 'download [filename]',
       'Download bookmarks from Larder and save to file'
  option :filename, aliases: :f

  def download(filename = "~/.lard_library.json")
    @lard.download_all_bookmarks filename
    puts "Downloaded bookmarks to #{filename}"
  end

  private

  def print_folder_name(folder)
    print Paint[folder[:name], folder[:color]]
    puts ":\t#{folder[:links]} links"
  end

  # TODO: How can we reduce the AbcSize here further?
  # rubocop: disable AbcSize
  def print_bookmark(bookmark)
    puts Paint[(bookmark[:title]).to_s, :bright]
    puts "  #{bookmark[:description]}" if bookmark[:description]
    puts "  #{bookmark[:url]}"

    return if bookmark[:tags].nil? || bookmark[:tags].empty?

    print '  '
    bookmark[:tags].each do |tag|
      print Paint["##{tag[:name]}", tag[:color]]
      print ' '
    end
    puts ''
  end

  # rubocop: enable AbcSize

  def print_tag(tag)
    puts Paint["##{tag[:name]}", tag[:color]]
  end

  def print_user(user)
    date = Date.strptime user[:date_joined]

    print Paint[user[:username], :bright]
    puts "  (#{user[:first_name]} #{user[:last_name]})"
    puts "  Links: #{user[:links]}"
    puts "  Joined on: #{date.strftime('%F')}"
    puts '  Trial membership active' if user[:is_trial]
  end
end

begin
  LardCLI.start(ARGV)
rescue StandardError => e
  STDERR.puts "Error: #{e.message}"

  # TODO: Check for developer flag passed to print stacktrace

  exit 1
end
# rubocop: enable ClassLength
